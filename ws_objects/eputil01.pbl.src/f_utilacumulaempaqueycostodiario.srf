$PBExportHeader$f_utilacumulaempaqueycostodiario.srf
global type f_utilacumulaempaqueycostodiario from function_object
end type

forward prototypes
global function integer f_utilacumulaempaqueycostodiario (decimal adc_tc)
end prototypes

global function integer f_utilacumulaempaqueycostodiario (decimal adc_tc);/* f_UtilAcumulaEmpaqueyCostoDiario( ) */
Boolean	lb_acaxcul = True
DateTime	ld_sys
Dec{2}	ldc_bulemp, ldc_pesbul, ldc_pestot, ldc_cosaca, ldc_cosmao, ldc_maopro, ldc_cosmat, &
			ldc_costot, ldc_coscor, ldc_pesxcul, ldc_bulxcul, ldc_cosmaogral, ldc_cosgas, &
			ldc_pesemp, ldc_porcen, ldc_acucos, ldc_cosumn, ldc_cosume, ldc_porpro, ldc_sobran, ldc_sobant
Dec{5}	ldc_impcos, ldc_impapc, ldc_cosmataux, ldc_cosgasaux
Integer	i, j, k, l, li_mer, li_return
Long		ll_aed, ll_apd, ll_ret
String	ls_pro, ls_cul, ls_cos, ls_fnd, ls_fil, ls_tem, ls_tipo, ls_mer
uo_DataStore lds_cos, lds_pro, lds_aed, lds_apd, lds_cul, lds_factor, lds_cultotal


ld_sys = gd_sys
ls_tem = gs_codtem

Destroy lds_cultotal
Destroy lds_cos 
Destroy lds_pro 
Destroy lds_aed
Destroy lds_apd
Destroy lds_factor

/* Liberar tablas de acumulados del dia */	

/* Contiene el costeo por grupos de costo por producto y mercado */
Update	t_acumulado_empaque_diario 
Set		n_bulemp_aed = 0,
			n_pestot_aed = 0,
			n_porcen_aed = 0,
			n_porpro_aed = 0,
			n_cosmat_aed = 0,
			n_cosgas_aed = 0,
			n_coscor_aed = 0,
			n_cosaca_aed = 0,
			n_cosmao_aed = 0,
			n_costot_aed = 0,
			n_costotme_aed = 0,
			n_cosumn_aed = 0,
			n_cosume_aed = 0
Where		c_codigo_tem = :ls_tem
And		c_activo_aed = '1'
Using		SqlCa ;

If f_SqlError( SqlCa, 'No se pudo limpiar la tabla t_acumulado_empaque_diario. (Update)' ) = -1 Then
	Return -1
End If

/* Contiene el costeo por concepto de costo por producto */
Update	t_acumulado_producto_diario 
Set		n_importe_apd = 0
Where		c_codigo_tem = :ls_tem
And		c_activo_apd = '1'
Using		SqlCa ;

If f_SqlError( SqlCa, 'No se pudo limpiar la tabla t_acumulado_producto_diario. (Update)' ) = -1 Then
	Return -1
End If

/* Factor de un producto y concepto específico */
Destroy lds_factor
lds_factor = Create uo_DataStore
lds_factor.DataObject = 'd_util_costo_x_prod'
lds_factor.SetTransObject( SqlCa )


/* Listado de Concepto de costos vigentes */
Destroy lds_cos
lds_cos = Create uo_DataStore
lds_cos.DataObject = 'd_dddw_costo'
lds_cos.SetTransObject( SqlCa )
ll_ret = lds_cos.Retrieve( )
lds_cos.SetSort( 'c_codigo_cos A')
lds_cos.Sort( )

/* Resumen por Cultivo */
Destroy lds_cul
lds_cul = Create uo_DataStore
lds_cul.DataObject = 'd_util_cultivo_x_fecha'
lds_cul.SetTransObject( SqlCa )

/* Resumen por Producto y Mercado obtenido de la tabla t_pallet */
Destroy lds_pro
lds_pro = Create uo_DataStore
lds_pro.DataObject = 'd_util_acumulado_prod_x_fechas_mercado'
lds_pro.SetTransObject( SqlCa )


Destroy lds_aed
lds_aed = Create uo_DataStore
lds_aed.DataObject = 'd_util_acumulado_empaque_diario_update'
lds_aed.SetTransObject( SqlCa )
ll_ret = lds_aed.Retrieve( ls_tem )

Destroy lds_apd
lds_apd = Create uo_DataStore
lds_apd.DataObject = 'd_util_acumulado_producto_diario_update'
lds_apd.SetTransObject( SqlCa )
ll_ret = lds_apd.Retrieve( ls_tem )


/* Variables Solo usadas como contadores en los "For" */
i = 0; j = 0; k = 0; l = 0

ll_ret = lds_cul.Retrieve( ls_tem, ld_sys, ld_sys )
ldc_pestot = 0

/* Obteniendo el peso total del mercado */

For k = 1 To lds_cul.RowCount( )
	
	ldc_pesxcul = f_Zero( lds_cul.Object.n_pestot[ k] )
	ldc_bulxcul = f_Zero( lds_cul.Object.n_bulxcul[ k] )
	ldc_pestot = ldc_pestot + ldc_pesxcul
Next


ldc_pesxcul = 0
/* Se inicia el proceso x cultivo y mercado */
For k = 1 To lds_cul.RowCount( )
	ls_cul = lds_cul.Object.c_codigo_cul[ k]
	
	/* Bultos x Cultivo y Peso Total por Cultivo */
	ldc_bulxcul = f_Zero( lds_cul.Object.n_bulxcul[ k] )
	ldc_pesxcul = f_Zero( lds_cul.Object.n_pestot[ k] )

	/* Inicializa Variables */
	ldc_cosaca = 0; ldc_cosmao = 0; ldc_costot = 0; ldc_coscor = 0 
	ldc_impcos = 0; ldc_impapc = 0; ldc_cosmaogral = 0; ldc_cosmat = 0; ldc_cosgas = 0 
	ldc_cosmataux = 0; ldc_cosgasaux = 0 	
	/* Se obtiene costo de acarreo CosAca por cultivo, es excluyente */
	lb_acaxcul = True
	Select	n_coston_cua
	Into		:ldc_cosaca
	From		t_cultivo_acarreo
	Where		c_codigo_tem = :gs_codtem
	And		c_codigo_cul = :ls_cul
	And		d_trabajo_cua = :gd_sys
	And		c_activo_cua = '1' ;
	If f_SqlError( SqlCa, 'No se pudo obtener información de la tabla t_cultivo_acarreo.' ) = -1 Then
		Return -1
	End If
	ldc_cosaca = f_Zero( ldc_cosaca )
	If ldc_cosaca = 0 Then
		/* Se obtiene costo de acarreo CosAca general */
		Select	n_coston_acg
		Into		:ldc_cosaca
		From		t_acarreo_general
		Where		c_codigo_tem = :gs_codtem
		And		d_trabajo_acg = :gd_sys
		And		c_activo_acg = '1' ;
		If f_SqlError( SqlCa, 'No se pudo obtener información de la tabla t_acarreo_general.' ) = -1 Then
			Return -1
		End If
		lb_acaxcul = False
	End If
	ldc_cosaca = f_Zero( ldc_cosaca )

	/* Se obtiene costo de corte CosCor por cultivo (no tiene proceso general) */
	Select	Sum(n_manobr_prc)
	Into		:ldc_coscor
	From		t_produccion_campo
	Where		c_codigo_tem = :gs_codtem
	And		c_codigo_cul = :ls_cul
	And		d_trabajo_prc = :gd_sys
	And		c_activo_prc = '1' ;
	If f_SqlError( SqlCa, 'No se pudo obtener información de la tabla t_produccion_campo. (Sum)' ) = -1 Then
		Return -1
	End If
	ldc_coscor = f_Zero( ldc_coscor )

	/* Hallar costo de mano de obra de diversas actividades */
		/* Se obtiene costo de mano de obra CosMao por cultivo */
	Select	Sum(n_monjor_mao)
	Into		:ldc_cosmao
	From		t_mano_obra
	Where		c_codigo_tem = :gs_codtem
	And		c_codigo_cul = :ls_cul
	And		d_trabajo_mao = :gd_sys
	And		c_activo_mao = '1' ;
	If f_SqlError( SqlCa, 'No se pudo obtener información de la tabla t_mano_obra.' ) = -1 Then
		Return -1
	End If
	ldc_cosmao = f_Zero( ldc_cosmao )
	/* Se obtiene costo de mano de obra CosMao general */
	Select	Sum(n_monjor_mog)
	Into		:ldc_cosmaogral
	From		t_mano_obra_general
	Where		c_codigo_tem = :gs_codtem
	And		d_trabajo_mog = :gd_sys
	And		c_activo_mog = '1' ;
	If f_SqlError( SqlCa, 'No se pudo obtener información de la tabla t_mano_obra_general.' ) = -1 Then
		Return -1
	End If

	ldc_cosmaogral = f_Zero( ldc_cosmaogral )
	
	/* Procesa cada producto */
	ll_ret = lds_pro.Retrieve( ls_tem, ls_cul )
	For i = 1 To lds_pro.RowCount( )
		/* Variables Key */
		ls_pro = lds_pro.Object.c_codigo_pro[ i]
		ls_mer = lds_pro.Object.c_merdes_acu[ i] //Del mercado donde finalmente se fue el producto
		
		ls_fnd = 'c_codigo_pro ="' + ls_pro + '" And c_merdes_aed = "' + ls_mer + '"'
		ll_aed = lds_aed.Find( ls_fnd, 1, lds_aed.RowCount( ) )
		If ll_aed <= 0 Then 
			ll_aed = lds_aed.InsertRow(0)
			lds_aed.Object.c_codigo_tem[ ll_aed] = gs_codtem
			lds_aed.Object.c_codigo_pro[ ll_aed] = ls_pro
			lds_aed.Object.c_codigo_cul[ ll_aed] = ls_cul
			lds_aed.Object.c_merdes_aed[ ll_aed] = ls_mer
			lds_aed.Object.c_activo_aed[ ll_aed] = '1'
			lds_aed.Object.c_codigo_usu[ ll_aed] = gs_usuario
			lds_aed.Object.d_creacion_aed[ ll_aed] = Today( )
		Else
			lds_aed.Object.c_usumod_aed[ ll_aed] = gs_usuario
			lds_aed.Object.d_modifi_aed[ ll_aed] = Today( )
		End If
		
		ldc_bulemp = f_Zero( lds_pro.Object.n_bulemp[ i] )
		ldc_pesbul = f_Zero( lds_pro.Object.n_pesbul_pro[ i] )
		//ldc_pesemp = f_Zero( lds_pro.Object.n_pesemp[ i] )
		ldc_pesemp = ldc_bulemp * ldc_pesbul
		lds_aed.Object.n_bulemp_aed[ ll_aed] = ldc_bulemp
		lds_aed.Object.n_pesbul_aed[ ll_aed] = ldc_pesbul
		lds_aed.Object.n_pestot_aed[ ll_aed] = ldc_pesemp
		
		/* Porcentaje por pro sobre el mercado */
		ldc_porpro = (ldc_pesemp * 100) / ldc_pestot  //******************************************
		lds_aed.Object.n_porpro_aed[ ll_aed] = ldc_porpro
		
		/* Mano de Obra General*/
		ldc_maopro = f_Zero( (ldc_cosmaogral * ldc_porpro) / 100 )
	
		/* Operaciones sobre los acumulados por cultivo */
		If ldc_pesxcul = 0 Then
			ldc_porcen = 0
		Else
			ldc_porcen = (ldc_pesemp * 100) / ldc_pesxcul
		End If
		lds_aed.Object.n_porcen_aed[ ll_aed] = ldc_porcen
		If lb_acaxcul Then
			lds_aed.Object.n_cosaca_aed[ ll_aed] = (ldc_cosaca * ldc_porcen) / 100
		Else
			lds_aed.Object.n_cosaca_aed[ ll_aed] = (ldc_cosaca * ldc_porpro) / 100
		End If
		
		ldc_maopro = ldc_maopro + (ldc_cosmao * ldc_porcen) / 100
		lds_aed.Object.n_cosmao_aed[ ll_aed] = ldc_maopro

		/* El costo de corte es por cultivo */
		lds_aed.Object.n_coscor_aed[ ll_aed] = (ldc_coscor * ldc_porcen) / 100
		
		/* Hallar el costo consolidado de materiales y gastos otros por prod. y luego guardar el desglose */
		ldc_acucos = 0 
		For j = 1 To lds_cos.RowCount( )
			ls_cos = lds_cos.Object.c_codigo_cos[ j]
			ls_tipo = lds_cos.Object.c_tipo_cos[ j]
			ls_fnd = 'c_codigo_pro ="' + ls_pro + '" And c_codigo_cos = "' + ls_cos + '"'
			ll_apd = lds_apd.Find( ls_fnd, 1, lds_apd.RowCount( ) )
			If ll_apd <= 0 Then 
				ll_apd = lds_aed.InsertRow(0)
				lds_apd.Object.c_codigo_tem[ ll_apd] = gs_codtem
				lds_apd.Object.c_codigo_pro[ ll_apd] = ls_pro
				lds_apd.Object.c_codigo_cos[ ll_apd] = ls_cos
				lds_apd.Object.n_importe_apd[ ll_apd] = 0
				lds_apd.Object.c_activo_apd[ ll_apd] = '1'
				lds_apd.Object.c_codigo_usu[ ll_apd] = gs_usuario
				lds_apd.Object.d_creacion_apd[ ll_apd] = Today( )
			Else
				lds_apd.Object.c_usumod_apd[ ll_apd] = gs_usuario
				lds_apd.Object.d_modifi_apd[ ll_apd] = Today( )
			End If
			ldc_impcos = 0
			/* Costo del Producto */
			If lds_factor.Retrieve( ls_pro, ls_cos ) > 0 Then
				ldc_impcos = lds_factor.Object.n_importe_prc[ 1]
			End If
			ldc_impcos = f_Zero( ldc_impcos ) * adc_tc
			ldc_impapc = ldc_bulemp * ldc_impcos
			ldc_acucos = ldc_acucos + ldc_impapc
			lds_apd.Object.n_importe_apd[ ll_apd] = lds_apd.Object.n_importe_apd[ ll_apd] + ldc_impapc 
			lds_apd.AcceptText( )
			If Upper( ls_tipo ) = 'M' Then
				ldc_cosmataux = ldc_cosmataux + ldc_impapc
			Else
				ldc_cosgasaux = ldc_cosgasaux + ldc_impapc
			End If
		Next
		ldc_cosmat = ldc_cosmataux  //* adc_tc
		ldc_cosgas = ldc_cosgasaux  //* adc_tc
		ldc_acucos = ldc_cosmat + ldc_cosgas
		lds_aed.Object.n_cosmat_aed[ ll_aed] = ldc_cosmat
		lds_aed.Object.n_cosgas_aed[ ll_aed] = ldc_cosgas
		ldc_acucos = ldc_acucos +	lds_aed.Object.n_coscor_aed[ ll_aed] + &
										lds_aed.Object.n_cosaca_aed[ ll_aed] + &
										lds_aed.Object.n_cosmao_aed[ ll_aed]
		lds_aed.Object.n_costot_aed[ ll_aed] = ldc_acucos
		lds_aed.Object.n_costotme_aed[ ll_aed] = ldc_acucos / adc_tc
		If ldc_bulemp = 0 Then
			ldc_cosumn = 0
			ldc_cosume = 0
		Else
			ldc_cosumn = ldc_acucos / ldc_bulemp
			ldc_cosume = ( ldc_acucos / ldc_bulemp ) / adc_tc
		End If
		lds_aed.Object.n_cosumn_aed[ ll_aed] = ldc_cosumn
		lds_aed.Object.n_cosume_aed[ ll_aed] = ldc_cosume
		lds_aed.AcceptText()
		// Limpia
		ldc_cosmataux = 0; ldc_cosgasaux = 0 	

	Next

Next

If Not lds_apd.Update( ) = 1 Then
	RollBack Using SqlCa ;
	Return -1
End If

If Not lds_aed.Update( ) = 1 Then
	RollBack Using SqlCa ;
	Return -1
End If


Update	t_acumulado_empaque_diario 
Set		n_acuporcen_aed = (( isnull(n_acupestot_aed,0) + isnull(n_pestot_aed,0) ) * 100 ) / ( Select	Sum( IsNull( A.n_acupestot_aed, 0 ) +
																													IsNull( A.n_pestot_aed, 0 ) )
																			From		t_acumulado_empaque_diario A
																			Where		A.c_codigo_cul = t_acumulado_empaque_diario.c_codigo_cul 
																			And		A.c_codigo_tem = :ls_tem
																			And		t_acumulado_empaque_diario.c_activo_aed = '1' ),
			n_acuporpro_aed =  (( isnull(n_acupestot_aed,0) + isnull(n_pestot_aed,0) ) * 100 ) / ( Select	Sum( IsNull( A.n_acupestot_aed, 0 ) +
																													IsNull( A.n_pestot_aed, 0 ) )
																			From		t_acumulado_empaque_diario A
																			Where		A.c_codigo_tem = :ls_tem
																			And		t_acumulado_empaque_diario.c_activo_aed = '1' ),
			n_acucosumn_aed = isnull(n_acucostot_aed,0) / isnull(n_acubulemp_aed,0),
			n_acucosume_aed = isnull(n_acucostotme_aed,0) / isnull(n_acubulemp_aed,0)
Where		c_codigo_tem = :ls_tem
And		c_activo_aed = '1'
And		(IsNull( n_acubulemp_aed, 0 ) + IsNull( n_bulemp_aed, 0 )) <> 0
Using		SqlCa ;

If f_SqlError( SqlCa, 'No se pudo limpiar la tabla t_acumulado_empaque_diario. (Update)' ) = -1 Then
	Return -1
End If


Destroy lds_cultotal
Destroy lds_cos 
Destroy lds_pro 
Destroy lds_aed
Destroy lds_apd
Destroy lds_factor

Return 1

end function

